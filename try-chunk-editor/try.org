#+TITLE: The Chunk Editor
# #+OPTIONS: toc:nil
# #+OPTIONS: num:nil
#+OPTIONS: html-postamble:nil
* Introduction
  Chunk editing is a new way to interact with Pyret programs. Statements are
  grouped into "chunks" that can be rearranged and linted independently. The
  right hand side displays bindings and test results from each chunk.
* Things to Try
** <<simple>>Create a simple chunk
   Identifiers and the values they are bound to are displayed on the right hand
   side of the page.
   1) Write ~import global as G~[fn:1] in an empty chunk.
   2) Press =Enter= to move into the next chunk.
   3) Write ~x = 404 * 5~ in the new chunk.
   4) Press =Enter= to update the right hand side.

   [[file:bind-id-to-val.png]] 
** <<multi-line>>Create a multi-line chunk
   Chunks are not limited to one line of code. Pressing =Enter= will advance you
   to the next chunk only if the one you're editing is syntactically complete.

   1) Write ~fun timesTwo(n :: Number) -> Number:~ in an empty chunk.
   2) Press =Enter= to move to the next line in the chunk.
   3) Write ~n * 2~ on the new line.
   4) Press =Enter=.
   5) Write ~end~ to complete the function definition.
   6) Press =Enter= to complete the chunk.

   [[file:multi-line-function.png]] 

   The chunk editor knows when you aren't finished with a statement. It will
   keep you in the same chunk until you complete it.
** Create new chunks with =Enter=
   Pressing =Enter= does different things depending on where your cursor is. If
   the cursor is at the end of a valid statement, =Enter= will create a new
   chunk and focus it (see [[simple]]). If the cursor is in the middle of a
   statement, =Enter= will create a new line in the same chunk (see [[multi-line]]).
** Move between chunks with the arrow keys
   Pressing =Up Arrow= while at the top of a chunk makes the cursor focus
   the chunk above. Similarly, pressing =Down Arrow= while at the bottom focuses
   the chunk below. This won't create any new chunks if they don't exist yet.
** Delete an empty chunk
   Using =Backspace= on an empty chunk will remove it, moving the cursor's focus
   into the chunk above.
** Fix an error
   Chunks with errors[fn:2] are highlighted red. Pressing =Enter= will make them
   jiggle and won't allow you to move into the next chunk.
   
   1) Write ~x = 12~ in another chunk to introduce a re-declaration error.
   2) Press =Enter= to display the error.
   3) Change ~x~ to ~y~ to fix the error.
   4) Press ~Enter~ to complete the chunk.
   
   [[file:errors.png]] 
** Write a test
   The result of a =check:= or =examples:= block is displayed inline with the
   identifier-value bindings on the right hand side of the page.

   1) Write ~check: 2 + 2 is 4 end~ in an empty chunk
   2) Press =Enter= to run the test. The right hand side of the page should show
      that the test succeeded.
   3) Change the ~4~ to a ~5~ to make the test fail.
   5) Press the run button. The right hand side should update to show that the
      test failed.
   
      [[file:test-failed.png]] 
** Build some flags
   Now that you've got a better idea of how to use the chunk editor, try
   using the image library[fn:3] (=import image as I=) to make the following flags.
*** Flag of [[https:en.wikipedia.org/wiki/Flag_of_Japan#/media/File:Construction_sheet_of_the_Japanese_flag_no_text.svg][Japan]]
    [[file:japanese-flag.png]]
*** Flag of [[https:en.wikipedia.org/wiki/Flag_of_Italy][Italy]]
   [[file:italian-flag.png]] 
* Things that don't entirely work yet
** <<type-check-off>>Tables
   Tables are supported through the tables library (=import tables as T=), but
   type-checking must be explicitly turned off.
   [[file:table.png]] 
** Error messages[fn:2]
   Errors aren't rendered very intelligently. They contain source location
   information embedded directly in the text. We're still trying to figure out
   the best way to render these.
** Right hand side value rendering
   Everything can be displayed on the right hand side, but some of it doesn't
   look very pretty.

   The following list of items are rendered nicely:
   - Images
   - Tables (see [[type-check-off]])
   - Small integers
   - Strings
   
   The following list of items could be displayed better:
   - Abstract data types
   - Large integers / non-integer numbers
   - Functions
   - Test results

* Footnotes

[fn:1] We are planning to remove the need to manually write =import global as G=.

[fn:2] Only compile and lint errors are currently displayed next to the
offending chunk(s). Runtime errors are displayed in a separate window.

[fn:3] The =image-structs= library is not yet available.
